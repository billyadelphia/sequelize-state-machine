{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Sequelize state machine\n * Author billyadelphia\n */\n\nimport { Model } from \"sequelize\";\nimport { SequelizeModel, Hooks } from \"./types\";\nimport StateMachineValidation from \"./StateMachineValidation\";\n\nclass StateMachine {\n  states!: Array<Object | string>;\n  field!: \"state\" | string;\n  transition!: any;\n  transitionIsStrict!: boolean;\n\n  constructor() {\n    this.states = [];\n    this.field = \"state\";\n    this.transition = {};\n    this.transitionIsStrict = true;\n  }\n\n  init(SequelizeModel: SequelizeModel): StateMachine {\n    const states = this.states;\n    const field: string = this.field;\n    const transitionIsStrict = this.transitionIsStrict;\n    const transition = this.transition;\n    const hooks: Hooks[] = [\"beforeSave\", \"afterSave\"];\n    const stateMachine = this;\n    /**\n     * Adding magic method\n     */\n    for (const trs of Object.keys(transition)) {\n      // add can function\n      SequelizeModel.prototype[`can${capitalize(trs)}`] = async function () {\n        if (this) {\n          try {\n            console.log(\"trs\", trs);\n            console.log(\"this[field]\", this[field]);\n            console.log(\"transition[trs].to\", transition[trs].to);\n            const can = stateMachine.can(\n              transition[trs],\n              this[field],\n              transition[trs].to\n            );\n            if (!can) {\n              return false;\n            }\n            return true;\n          } catch (e) {\n            throw new StateMachineValidation(e.message);\n          }\n        }\n      };\n\n      // add state machine function\n      SequelizeModel.prototype[trs] = async function () {\n        if (SequelizeModel) {\n          try {\n            // let updating: any = {};\n            // updating[field] = transition[trs].to;\n            SequelizeModel[field] = transition[trs].to;\n            await this.save();\n            return SequelizeModel;\n          } catch (e) {\n            throw new StateMachineValidation(e.message);\n          }\n        }\n      };\n    }\n    /**\n     * End of adding magic method\n     */\n\n    for (const hook of hooks) {\n      SequelizeModel.addHook(\n        hook,\n        `StateMachine${capitalize(hook)}`,\n        async (instance: SequelizeModel, options: any) => {\n          try {\n            const dataValue = instance[field];\n\n            if (this.inStates(states, dataValue)) {\n              if (instance.previous(dataValue) !== dataValue) {\n                let hookValidation = true;\n                let hookFunction = \"after\";\n\n                if (hook === \"beforeSave\") {\n                  if (instance.isNewRecord) {\n                    hookValidation = this.isInitialState(states, dataValue);\n                  } else {\n                    hookValidation = this.fromPreviousState(\n                      transition,\n                      dataValue,\n                      instance.previous(dataValue)\n                    );\n                  }\n                  hookFunction = \"before\";\n                }\n\n                if (transitionIsStrict ? hookValidation : true) {\n                  let beforeValidate = true;\n                  /**\n                   * validation function\n                   */\n                  if (\n                    typeof instance[`validate${capitalize(dataValue)}`] ===\n                    \"function\"\n                  ) {\n                    beforeValidate = await instance[\n                      `validate${capitalize(instance[field])}`\n                    ]();\n                  }\n                  /**\n                   * end of validation function\n                   */\n\n                  // if validation correct or not returning false, then procced to after or before function\n                  if (beforeValidate !== false) {\n                    if (\n                      typeof instance[\n                        `${hookFunction}${capitalize(instance[field])}`\n                      ] === \"function\"\n                    ) {\n                      await instance[\n                        `${hookFunction}${capitalize(instance[field])}`\n                      ]();\n                    }\n                  } else {\n                    throw new StateMachineValidation(\n                      `error : validate${capitalize(\n                        instance[field]\n                      )} is invalid`\n                    );\n                  }\n                } else {\n                  throw new StateMachineValidation(\n                    `error : incorrect transition validation`\n                  );\n                }\n              }\n            } else {\n              throw new StateMachineValidation(\"error : state not found\");\n            }\n          } catch (e) {\n            throw e;\n          }\n        }\n      );\n    }\n\n    return this;\n  }\n\n  addStates(states: Array<Object | string>): StateMachine {\n    if (Array.isArray(states)) {\n      this.states = states;\n      return this;\n    } else {\n      throw new StateMachineValidation(\"states must be an array\");\n    }\n  }\n\n  stateField(field: string) {\n    if (field) {\n      this.field = field;\n    }\n    return this;\n  }\n\n  addTransition(transition: Object) {\n    this.transition = transition;\n    return this;\n  }\n\n  isStrict(bool: boolean) {\n    this.transitionIsStrict = typeof bool === \"boolean\" ? bool : true;\n    return this;\n  }\n\n  private inStates(states: Array<Object | string>, state: string) {\n    if (states && states.length) {\n      let correctState = false;\n      for (const status of states) {\n        if (typeof status === \"object\") {\n          if (status[state]) {\n            correctState = true;\n            break;\n          }\n        } else {\n          if (status === state) {\n            correctState = true;\n            break;\n          }\n        }\n      }\n      return correctState;\n    } else {\n      throw new StateMachineValidation(\"states is not an array !\");\n    }\n  }\n\n  private can(\n    transition: { from: string | string[]; to: string | string[] },\n    from: string,\n    to: string\n  ) {\n    if (from !== to) {\n      if (typeof transition === \"object\") {\n        let fromTrue = false;\n        if (typeof transition.from === \"string\") {\n          fromTrue = transition.from === from;\n        } else {\n          fromTrue = transition.from.includes(from);\n        }\n        let toTrue = false;\n        if (typeof transition.to === \"string\") {\n          toTrue = transition.to === to;\n        } else {\n          toTrue = transition.to.includes(from);\n        }\n        return fromTrue && toTrue;\n      }\n    }\n    return false;\n  }\n\n  private fromPreviousState(\n    transition: Object,\n    state: string,\n    previousState: string\n  ) {\n    if (state !== previousState) {\n      if (typeof transition === \"object\") {\n        let isTrue = false;\n        for (const object of Object.keys(transition)) {\n          let transitionData = transition[object];\n          if (transitionData.to === state) {\n            if (typeof transitionData.from === \"string\") {\n              if (transitionData.from === previousState) {\n                isTrue = true;\n                break;\n              } else {\n                isTrue = false;\n              }\n            } else {\n              if (transitionData.from.includes(previousState)) {\n                isTrue = true;\n                break;\n              } else {\n                isTrue = false;\n              }\n            }\n          } else {\n            isTrue = false;\n          }\n        }\n\n        return isTrue;\n      } else {\n        throw new StateMachineValidation(\"transition is not an object\");\n      }\n    } else {\n      return false;\n    }\n  }\n\n  private isInitialState(states: Array<Object | string>, state: string) {\n    if (states && states.length) {\n      let correctState = true;\n      for (const status of states) {\n        if (typeof status === \"object\") {\n          if (status[state]) {\n            if (status[state].initial === false) {\n              correctState = false;\n              break;\n            }\n            if (status[state].initial === true) {\n              correctState = true;\n              break;\n            }\n          } else {\n            correctState = false;\n            break;\n          }\n        } else {\n          correctState = false;\n          break;\n        }\n      }\n      return correctState;\n    } else {\n      throw new StateMachineValidation(\"states is not an array !\");\n    }\n  }\n}\n\nconst capitalize = (s: string): string => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default new StateMachine();\n"]}